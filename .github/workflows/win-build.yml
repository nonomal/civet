# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: win-build

on: [push]

jobs:
  build:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: build
        run: |
          npm install
          npm run build
        env:
          CI: true
      - uses: olegtarasov/get-tag@v2.1
        id: tagVersion
        with:
          tagRegex: "v(.*)"
          tagRegexGroup: 1
      - name: upload
        id: upload
        uses: actions/upload-artifact@v2
        with:
          name: win-build
          path: ./build/Civet Setup ${{ steps.tagVersion.outputs.tag }}.exe
      # - name: tmate session
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3
      #   timeout-minutes: 60
  test:
    runs-on: windows-2019
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      # - name: test
      #   run: |
      #     npm install
      #     npm run test --loglevel silly
      #   env:
      #     CI: true
  publish:
    runs-on: windows-2019
    needs: build
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: extract version
        id: version
        run: |
          echo "version=${GITHUB_REF#$"refs/tags/v"}" >> $GITHUB_ENV
      #     echo "##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$"refs/tags/v"}"
      #     echo "##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest"
      # - name: prepare env
      #   run: |
      #     echo VERSION_TAG=$(echo ${{ steps.version.outputs.version_tag }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      #     echo LASTEST_TAG=$(echo ${{ steps.version.outputs.latest_tag  }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      - name: get Release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: view cache
        uses: actions/download-artifact@v2
        with:
          name: win-build
          path: ${{github.workspace}}/download/
      - uses: olegtarasov/get-tag@v2.1
        id: tagVersion
        with:
          tagRegex: "v(.*)"
          tagRegexGroup: 1
      - name: upload win artifact
        working-directory: ${{github.workspace}}/download
        env:
          GITHUB_TOKEN: ${{ github.token }}
          CI: true
          FILE: CivetSetup.${{ steps.tagVersion.outputs.tag }}.exe
        run: |
          mv "Civet Setup ${{ steps.tagVersion.outputs.tag }}.exe" "CivetSetup.${{ steps.tagVersion.outputs.tag }}.exe"
          curl -H "Authorization: token ${{ github.token }}" -H "Content-Type: application/x-dosexec" --data-binary "@CivetSetup.${{ steps.tagVersion.outputs.tag }}.exe" "https://uploads.github.com/repos/webbery/civet/releases/${{ steps.get_release.outputs.id }}/assets?name=CivetSetup.${{ steps.tagVersion.outputs.tag }}.exe"
