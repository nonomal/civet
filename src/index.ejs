<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>civet</title>
    <% if (htmlWebpackPlugin.options.nodeModules) { %>
      <!-- Add `node_modules/` to global paths so `require` works properly in development -->
      <script>
        require('module').globalPaths.push('<%= htmlWebpackPlugin.options.nodeModules.replace(/\\/g, '\\\\') %>')
      </script>
    <% } %>
  </head>
  <body style="overflow:hidden">
    <canvas id="hidden" width="120" height="180"></canvas>
    <script>
      let _cv_command_args = {}
      let _cv_message_id_ = 0
      let _cv_activate_view_name = ''
      let _cv_content_view_name = ''
      let _cv_select_id_ = undefined
      let _cv_overview_listeners = {}
      let _cv_contentview_listeners = {}
      const _cv_events = (function() {
        const { EventEmitter } = require('events')
        let events = new Map()
        return {
          get: function(id) {
            if (events[id] === undefined) {
              events[id] = new EventEmitter()
            }
            return events[id]
          },
          emit: function(id, event, value) {
            console.info('emit', event, 'to', id)
            if (!events[id]) {
              console.error('event ', id, 'not exist')
              return
            }
            return events[id].emit(event, value)
          },
          on: function(id, event, listener) {
            if (!events[id]) {
              events[id] = new EventEmitter()
              console.info(id, 'EventEmitter On', event)
            }
            events[id].on(event, listener)
          },
          once: function(id, event, listener) {
            if (!events[id]) {
              events[id] = new EventEmitter()
              console.info(id, 'EventEmitter Once', event)
            }
            events[id].once(event, listener)
          },
          clean: function(id, event) {
            if (!events[id]) return
            if (!event) {
              events[id].removeAllListeners()
              return
            }
            events[id].removeAllListeners(event)
          }
        }
      })()
      const _cv_messageSender_ = (function() {
        const { ipcRenderer } = window.require('electron')
        return {
          send: function(type, msg) {
            ipcRenderer.send('message-from-renderer', {
              id: _cv_message_id_++,
              type: type,
              data: msg
            })
          }
        }
      })()
      
      const acquireCivetApi = (function() {
        const Overview = {
          click: function(id) {
            _cv_select_id_ = id
            _cv_events.emit('PropertyView', 'click', id)
            _cv_events.emit('Overview', 'click', id)
            if (id) {
              _cv_messageSender_.send('getSelectContentItemInfo', {id: [id]})
            }
          },
          rclick: function(x, y, id) {
            console.debug('right click')
          },
          remove: function(id) {
            console.info('remove item:', id)
          },
          on: function(event, listener) {
            const name = 'Overview:' + _cv_activate_view_name
            if (!_cv_overview_listeners[name]) {
              _cv_overview_listeners[name] = [event, listener]
            }
            _cv_events.on(name, event, listener)
          }
        }
        const ContentView = {
          on: function(event, listener) {
            const name = 'ContentView:' + _cv_content_view_name
            if (!_cv_contentview_listeners[name]) {
              _cv_contentview_listeners[name] = [event, listener]
            }
            console.debug('regist contentview event', name)
            _cv_events.on(name, event, listener)
          }
        }
        return function() {
          return {
            postMessage: function(args) {
              if (args['command']) {
                const command = args['command']
                delete args['command']
                console.info('emit', command, args)
                _cv_events.emit('civet', command, args)
              }
            },
            injectCommandParams: function (command, args) { _cv_command_args[command] = args },
            events: _cv_events,
            setHtml: function(viewname, node, html) {
              let propname = 'cv' + viewname.replace(viewname[0], viewname[0].toUpperCase())
              if (propname in node.dataset === false) {
                node.dataset[propname] = ''
              }
              node.innerHTML = html.replace(/(<(\"[^\"]*\"|\'[^\']*\'|[^\'\"/>])*)>/g, '$1 data-cv-' + viewname + '>')
              // console.info('html loader', _cv_activate_view_name)
            },
            Overview: Overview,
            ContentView: ContentView
          }
        }
      })()
    </script>
    <div id="app"></div>
    <!-- Set `__static` path to static files in production -->
    <% if (!process.browser) { %>
      <script>
        if (process.env.NODE_ENV !== 'development') window.__static = require('path').join(__dirname, '/static').replace(/\\/g, '\\\\')
      </script>
    <% } %>
    <!-- webpack builds are automatically injected -->
    <style>
      #hidden {
        position: absolute;
        /* visibility:hidden; */
        left: 50px;
        top: 50px;
        z-index: -1;
      }
      .selected {
        font-size: 14px;
        background-color:rgb(16, 125, 197);
      }
      /* .el-scrollbar__wrap {
        overflow-x: hidden;
      } */
      .el-select-dropdown__item{
        list-style: none;
        font-size: 12px;
        padding: 0 20px;
        position: relative;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: #eee;
        height: 30px;
        line-height: 30px;
        box-sizing: border-box;
        cursor: pointer;
      }
      .el-select-dropdown__list{
        color: #eee;
        list-style: none;
        padding: 6px 0;
        margin: 0;
        box-sizing: border-box;
      }
      .el-select-dropdown__wrap{
        margin-bottom: 0px;
      }
      .el-color-picker__trigger {
        height: 20px;
        width: 20px;
        transform: translateY(4px);
        padding: 0;
        border: 0;
      }
      .el-color-picker--mini .el-color-picker__trigger{
        height: 20px;
        width: 20px;
      }
      .modal{
        background-color: #222933;
        font-size: 14px;
        font-weight: 600;
        color: aliceblue;
      }
      ._cv_content_loading {
        position: relative;
        margin: 0 auto;
        width: 100px;
      }
      ._cv_content_loading::before {
        content: '';
        display: block;
        padding-top: 100%;
      }
      ._cv_circular {
        animation: rotate 2s linear infinite;
        height: 100%;
        transform-origin: center center;
        width: 100%;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        margin: auto;
      }
      ._cv_path {
        stroke-dasharray: 1, 200;
        stroke-dashoffset: 0;
        animation: dash 1.5s ease-in-out infinite, color 6s ease-in-out infinite;
        stroke-linecap: round;
      }
      @keyframes rotate {
        100% {
          transform: rotate(360deg);
        }
      }

      @keyframes dash {
        0% {
          stroke-dasharray: 1, 200;
          stroke-dashoffset: 0;
        }
        50% {
          stroke-dasharray: 89, 200;
          stroke-dashoffset: -35px;
        }
        100% {
          stroke-dasharray: 89, 200;
          stroke-dashoffset: -124px;
        }
      }

      @keyframes color {
        100%,
        0% {
          stroke: rgb(173, 137, 137);
        }
        40% {
          stroke: rgb(135, 135, 170);
        }
        66% {
          stroke: rgb(118, 146, 118);
        }
        80%,
        90% {
          stroke: rgb(194, 194, 157);
        }
      }
      </style>
  </body>
</html>
